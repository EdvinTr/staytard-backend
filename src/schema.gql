# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserAddress {
  id: Float!
  city: String!
  street: String!
  postalCode: String!
}

type User {
  id: String!
  firstName: String!
  lastName: String!
  mobilePhoneNumber: String!
  email: String!
  isEmailConfirmed: Boolean!
  isRegisteredWithGoogle: Boolean!
  isAdmin: Boolean!
  address: UserAddress
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserWithTokensDto {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type ProductCategory {
  id: Float!
  name: String!
  description: String!
  path: String!
  slug: String!
  parent: ProductCategory
  children: [ProductCategory!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProductImage {
  id: Float!
  imageUrl: String!
}

type ProductOption {
  productId: Float!
  optionId: Float!
  optionName: String!
}

type Product {
  id: Float!
  name: String!
  description: String!
  currentPrice: Float!
  originalPrice: Float!
  brand: ProductBrand!
  images: [ProductImage!]
  options: ProductOption!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductBrand {
  id: Float!
  name: String!
  path: String!
}

type Query {
  me: User!
  getCategories: [ProductCategory!]!
  getOneCategory(slug: String!): ProductCategory!
  products: [Product!]!
  productBrands(input: GetProductBrandsInput!): [ProductBrand!]!
}

input GetProductBrandsInput {
  sortBy: SortBy
  sortDirection: SortDirection
}

"""Field to sort the result by"""
enum SortBy {
  ID
  NAME
}

"""The basic directions"""
enum SortDirection {
  DESC
  ASC
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  registerUser(input: RegisterUserDto!): UserWithTokensDto!
  login(input: LoginUserDto!): UserWithTokensDto!
  logout: Boolean!
  authenticateWithGoogle(googleAuthToken: String!): UserWithTokensDto!
}

input CreateProductInput {
  name: String!
  description: String!
  originalPrice: Float!
  currentPrice: Float!
  imageUrls: [String!]!
  categoryId: Float!
  brandId: Float!
}

input RegisterUserDto {
  email: String!
  firstName: String!
  lastName: String!
  mobilePhoneNumber: String!
  password: String!
  city: String!
  street: String!
  postalCode: String!
}

input LoginUserDto {
  email: String!
  password: String!
}
