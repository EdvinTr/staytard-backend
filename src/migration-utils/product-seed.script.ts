// Generated by https://quicktype.io
import axios from 'axios';
import * as casual from 'casual';
import { appendFile } from 'fs/promises';
import * as path from 'path';
import { generateSku } from '../utils/generate-sku.util';

export interface StayhardResponse {
  category: PurpleCategory;
  sort: Sort[];
  count: Count;
  suggestions: null;
  articles: Article[];
  filters: Filters;
  categories: CategoryElement[];
  pagination: Pagination;
  activeCategories: ActiveCategory[];
}

export interface ActiveCategory {
  name: string;
  slug: string;
  path: string;
}

export interface Article {
  id: string;
  name: string;
  nameSeo: string;
  subBrand: string;
  subBrandSeo: string;
  imageFront: Image;
  rating: string;
  imageAlternative: Image;
  skusData: SkusDatum[];
  labels: Label[];
  energyLabel: null;
  currentPrice: number;
  originalPrice: number;
  discountAmount: number;
  relatedArticles: RelatedArticle[];
}

export interface Image {
  type?: Type;
  card: string;
  detail: string;
  thumb?: string;
}

export enum Type {
  Bm = 'Bm',
  Fm = 'Fm',
}

export interface Label {
  url: string;
  class: Class;
  width: number;
  height: number;
}

export enum Class {
  BottomLeft1 = 'bottomLeft-1',
  TopCenter1 = 'topCenter-1',
  TopRight1 = 'topRight-1',
}

export interface RelatedArticle {
  id: string;
  type: Type;
  image: Image;
}

export interface SkusDatum {
  sku: string;
  size: string;
  inStock: boolean;
}

export interface CategoryElement {
  _meta: Meta;
  slug: string;
  path: string;
  name: string;
  isNewsCategory: boolean;
  count: string;
  selected: boolean;
}

export interface Meta {
  schema: string;
  deliveryId: string;
}

export interface PurpleCategory {
  pageTitle: string;
  pageDescription: string;
  headline: null;
  text: string;
}

export interface Count {
  total: number;
  pageupper: number;
  pagelower: number;
}

export interface Filters {
  brand: Brand;
  color: Color;
  size: Color;
  category: FiltersCategory;
  toggle: Toggle;
}

export interface Brand {
  type: string;
  selected: boolean;
  values: { [key: string]: BrandValue[] };
}

export interface BrandValue {
  count: number;
  hidden: boolean;
  id: string;
  label: string;
  query: string;
  selected: boolean;
  link: string;
  undolink: string;
}

export interface FiltersCategory {
  label: string;
  type: string;
  values: Array<CategoryValue[]>;
}

export interface CategoryValue {
  children: boolean;
  count: number;
  hidden: boolean;
  id: string;
  label: string;
  query: string;
  selected: boolean;
  root: boolean;
  parentId?: ParentID;
}

export enum ParentID {
  ByxorKladerByxorFalse = 'Byxor:klader/byxor:false',
  KläderKladerFalse = 'Kläder:klader:false',
}

export interface Color {
  type: string;
  selected: boolean;
  values: BrandValue[];
}

export interface Toggle {
  id: string;
  label: string;
  values: ToggleValue[];
}

export interface ToggleValue {
  id: string;
  color: string;
  query: string;
  label: string;
  description: string;
  selected: boolean;
}

export interface Pagination {
  current: number;
  next: string;
  last: string;
}

export interface Sort {
  selected: boolean;
  value: string;
  label: string;
  path: string;
}
const colors = [
  'Red',
  'Green',
  'Blue',
  'Black',
  'White',
  'Orange',
  'Yellow',
  'Gray',
  'Silver',
  'Navy',
  'Pink',
  'Purple',
  'Brown',
  'Beige',
  'Cream',
  'Gold',
  'Copper',
  'Coral',
  'Crimson',
  'Cyan',
  'Emerald',
  'Indigo',
  'Lime',
  'Magenta',
  'Maroon',
  'Mauve',
  'Olive',
  'Olive Green',
  'Orange',
  'Pink',
  'Purple',
  'Red',
  'Silver',
  'Teal',
  'Turquoise',
  'Violet',
  'Yellow',
];
const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];

const baseUrls = {
  klader: 'klader',
  skor: 'skor',
  accessoarer: 'accessoarer',
};
const clothesCategories = [
  'byxor',
  'jackor',
  'jeans',
  'kavaj-kostym',
  'overshirts',
  'shorts',
  'tröjor',
  't-shirts-pikéer',
];
const generate = async (nextPage?: string) => {
  try {
    // TODO: should use recursion of some sort and pass the next page number
    const response = await axios.get<StayhardResponse>(
      'https://www.stayhard.se/api/articles/?path=%2Fklader%2Fbyxor&page=1',
    );
    const { data } = response;

    const products = data.articles?.map((article) => {
      const color = colors[casual.integer(0, colors.length - 1)];
      const size = sizes[casual.integer(0, sizes.length - 1)];
      return {
        name: article.name,
        unitPrice: article.originalPrice,
        images: [
          article.imageFront.detail,
          article.imageAlternative.detail,
          ...article?.relatedArticles?.map(
            (relatedArticle) => relatedArticle.image.detail,
          ),
        ],
        description: casual.sentences(8),
        attributes: [
          {
            size: { value: size },
            color: { value: color },
            quantity: { value: casual.integer(1, 100) },
            sku: { value: generateSku(article.name, color, size) },
          },
        ],
      };
    });

    // append products to JSON file
    const filePath = path.join(
      process.cwd(),
      'src',
      'migration-utils',
      'products.json',
    );
    await appendFile(filePath, JSON.stringify(products));
    console.log('DONE');
    const nextUrl = response.data.pagination.next;
    if (!nextUrl || nextUrl === '') {
      return;
    }

    return 0;
  } catch (err) {
    console.error(err);
  }
};
generate('https://www.stayhard.se/api/articles/?path=%2Fklader%2Fbyxor');
