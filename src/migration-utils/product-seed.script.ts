// Generated by https://quicktype.io
import axios from 'axios';
import * as casual from 'casual';
import { readFile, writeFile } from 'fs/promises';
import * as path from 'path';
import { ProductAttribute } from '../modules/product/entities/product-attribute.entity';
import { ProductColor } from '../modules/product/entities/product-color.entity';
import { ProductSize } from '../modules/product/entities/product-size.entity';
import { Product } from '../modules/product/entities/product.entity';
import { generateSku } from '../utils/generate-sku.util';
import { translateFromSvToEn } from '../utils/translate-from-sv-to-en';

export interface StayhardResponse {
  category: PurpleCategory;
  sort: Sort[];
  count: Count;
  suggestions: null;
  articles: Article[];
  filters: Filters;
  categories: CategoryElement[];
  pagination: Pagination;
  activeCategories: ActiveCategory[];
}

export interface ActiveCategory {
  name: string;
  slug: string;
  path: string;
}

export interface Article {
  id: string;
  name: string;
  nameSeo: string;
  subBrand: string;
  subBrandSeo: string;
  imageFront: Image;
  rating: string;
  imageAlternative: Image;
  skusData: SkusDatum[];
  labels: Label[];
  energyLabel: null;
  currentPrice: number;
  originalPrice: number;
  discountAmount: number;
  relatedArticles: RelatedArticle[];
}

export interface Image {
  type?: Type;
  card: string;
  detail: string;
  thumb?: string;
}

export enum Type {
  Bm = 'Bm',
  Fm = 'Fm',
}

export interface Label {
  url: string;
  class: Class;
  width: number;
  height: number;
}

export enum Class {
  BottomLeft1 = 'bottomLeft-1',
  TopCenter1 = 'topCenter-1',
  TopRight1 = 'topRight-1',
}

export interface RelatedArticle {
  id: string;
  type: Type;
  image: Image;
}

export interface SkusDatum {
  sku: string;
  size: string;
  inStock: boolean;
}

export interface CategoryElement {
  _meta: Meta;
  slug: string;
  path: string;
  name: string;
  isNewsCategory: boolean;
  count: string;
  selected: boolean;
}

export interface Meta {
  schema: string;
  deliveryId: string;
}

export interface PurpleCategory {
  pageTitle: string;
  pageDescription: string;
  headline: null;
  text: string;
}

export interface Count {
  total: number;
  pageupper: number;
  pagelower: number;
}

export interface Filters {
  brand: Brand;
  color: Color;
  size: Color;
  category: FiltersCategory;
  toggle: Toggle;
}

export interface Brand {
  type: string;
  selected: boolean;
  values: { [key: string]: BrandValue[] };
}

export interface BrandValue {
  count: number;
  hidden: boolean;
  id: string;
  label: string;
  query: string;
  selected: boolean;
  link: string;
  undolink: string;
}

export interface FiltersCategory {
  label: string;
  type: string;
  values: Array<CategoryValue[]>;
}

export interface CategoryValue {
  children: boolean;
  count: number;
  hidden: boolean;
  id: string;
  label: string;
  query: string;
  selected: boolean;
  root: boolean;
  parentId?: ParentID;
}

export enum ParentID {
  ByxorKladerByxorFalse = 'Byxor:klader/byxor:false',
  KläderKladerFalse = 'Kläder:klader:false',
}

export interface Color {
  type: string;
  selected: boolean;
  values: BrandValue[];
}

export interface Toggle {
  id: string;
  label: string;
  values: ToggleValue[];
}

export interface ToggleValue {
  id: string;
  color: string;
  query: string;
  label: string;
  description: string;
  selected: boolean;
}

export interface Pagination {
  current: number;
  next: string;
  last: string;
}

export interface Sort {
  selected: boolean;
  value: string;
  label: string;
  path: string;
}
const colors = [
  'Red',
  'Green',
  'Blue',
  'Black',
  'White',
  'Orange',
  'Yellow',
  'Gray',
  'Silver',
  'Navy',
  'Pink',
  'Purple',
  'Brown',
  'Beige',
  'Cream',
  'Gold',
  'Copper',
  'Coral',
  'Crimson',
  'Cyan',
  'Emerald',
  'Indigo',
  'Lime',
  'Magenta',
  'Maroon',
  'Mauve',
  'Olive',
  'Olive Green',
  'Orange',
  'Pink',
  'Purple',
  'Red',
  'Silver',
  'Teal',
  'Turquoise',
  'Violet',
  'Yellow',
];
const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];

const clothesSubCategories = {
  /*   byxor: 'Pants',
  jackor: 'Jackets',
  'kavaj-kostym': 'Jacket & suit',
  shorts: 'Shorts',
  trojor: 'Sweaters',
  't-shirts-pikeer': 'T-shirts', */
  jeans: 'Jeans',
  'strumpor-underklader': 'Socks & underwear',
  skjortor: 'Shirts',
};

const shoesSubCategories = {
  'sneakers-textilskor': 'Sneakers & fabric shoes',
  'boots-kangor': 'Boots',
  'flip-flops-sandaler': 'Flip flops & sandals',
};

const accessoriesSubCategories = {
  'mossor-kepsar-hattar': 'Hats & Caps',
  solglasogon: 'Sunglasses',
  'vaskor-planbocker': 'Bags & wallets',
  klockor: 'Watches',
};

const lifestyleSubCategories = {
  'face-body': 'Face & Body',
};

const combinedMapOfCategories = {
  klader: {
    ...clothesSubCategories,
  },
  skor: {
    ...shoesSubCategories,
  },
  accessoarer: {
    ...accessoriesSubCategories,
  },
  lifestyle: {
    ...lifestyleSubCategories,
  },
};

type AttributeWithoutProduct = Pick<
  ProductAttribute,
  'color' | 'quantity' | 'size' | 'sku'
>;
export type GeneratedProduct = Pick<
  Product,
  'name' | 'description' | 'unitPrice'
> & {
  images: string[];
  brandName: string;
  attributes: AttributeWithoutProduct[];
};

interface GenerateProductsInput {
  baseCategory: string;
  pageNumber: number;
  category: string;
  categoryInEnglish: string;
}

const generateProducts = async (input: GenerateProductsInput) => {
  try {
    console.log(
      `Calling StayHard API with page number ${input.pageNumber}. Base category is ${input.baseCategory} and sub category: ${input.category}`,
    );
    const response = await axios.get<StayhardResponse>(
      `https://www.stayhard.se/api/articles/?path=%2F${input.baseCategory}%2F${input.category}&page=${input.pageNumber}`,
    );
    const { data } = response;
    if (data.articles.length === 0) {
      console.log('No more data, using the next category');
      return;
    }
    const products: GeneratedProduct[] = [];
    for (const article of data.articles) {
      const translatedName = await translateFromSvToEn(article.name);
      const imageUrls = [
        article.imageFront.detail,
        article.imageAlternative.detail,
        ...article?.relatedArticles?.map(
          (relatedArticle) => relatedArticle.image.detail,
        ),
      ];
      const prod = {
        name: translatedName,
        unitPrice: Math.floor(article.originalPrice / 10),
        images: imageUrls,
        brandName: article.subBrand,
        description: casual.sentences(casual.integer(3, 8)),
        attributes: [...generateAttributes(imageUrls.length, translatedName)],
      };
      products.push(prod);
    }
    const filePath = path.join(
      process.cwd(),
      'src',
      'migration-utils',
      'products.json',
    );
    const currentData = await readFile(filePath).then((d) =>
      JSON.parse(d as unknown as string),
    );
    const mergedData = [
      ...currentData,
      { categoryName: input.categoryInEnglish, products },
    ];
    await writeFile(filePath, JSON.stringify(mergedData));

    await generateProducts({ ...input, pageNumber: input.pageNumber + 1 }); //! recursive
  } catch (err) {
    console.error(err);
  }
};

const generateAttributes = (length: number, productName: string) => {
  const attributes = [];
  for (let i = 0; i < length; i++) {
    const color = new ProductColor();
    color.value = colors[casual.integer(0, colors.length - 1)];

    const size = new ProductSize();
    size.value = sizes[casual.integer(0, sizes.length - 1)];

    attributes.push({
      size,
      color,
      quantity: casual.integer(1, 100),
      sku: generateSku(productName, color.value, size.value),
    });
  }
  return attributes;
};

const main = async () => {
  console.log('Generating products....');
  for (const [baseCategory, subCategories] of Object.entries(
    combinedMapOfCategories,
  )) {
    for (const [swedishCategoryName, englishCategoryName] of Object.entries(
      subCategories,
    ))
      await generateProducts({
        pageNumber: 1,
        baseCategory,
        category: swedishCategoryName,
        categoryInEnglish: englishCategoryName,
      });
  }
};
main();
